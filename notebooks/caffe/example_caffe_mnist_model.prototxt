name: "ExampleCaffeMNISTModel"
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  transform_param {
    scale: 0.00392156862745
  }
  data_param {
    source: "/work/rbusche/datasets/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv2d_1"
  type: "Convolution"
  bottom: "data"
  top: "conv2d_1"
  convolution_param {
    num_output: 32
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian" # initialize the filters from a Gaussian
      std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv2d_1"
  top: "conv2d_1" # inplace computation
}
layer {
  name: "max_pooling2d_1"
  type: "Pooling"
  bottom: "conv2d_1"
  top: "max_pooling2d_1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv2d_2"
  type: "Convolution"
  bottom: "max_pooling2d_1"
  top: "conv2d_2"
  convolution_param {
    num_output: 32
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian" # initialize the filters from a Gaussian
      std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2d_2"
  top: "conv2d_2" # inplace computation
}
layer {
  name: "dropout_1"
  type: "Dropout"
  bottom: "conv2d_2"
  top: "dropout_1"
}
layer {
  name: "dense_1"
  type: "InnerProduct"
    inner_product_param {
    num_output: 64
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  bottom: "dropout_1"
  top: "dense_1"
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "dense_1"
  top: "dense_1" # inplace computation
}
layer {
  name: "dropout_2"
  type: "Dropout"
  bottom: "dense_1"
  top: "dropout_2"
}
layer {
  name: "dense_2"
  type: "InnerProduct"
    inner_product_param {
    num_output: 10
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }

  bottom: "dropout_2"
  top: "dense_2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "dense_2"
  bottom: "label"
  top: "loss"
}
