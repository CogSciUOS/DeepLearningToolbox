"""Configuration of the Deep Learning Toolbox (dltb).
"""
import os
from pathlib import Path

# FIXME[hack]: develop some config mechanism
class Config:

    def set_default_value(self, name: str, value) -> None:
        if not hasattr(self, name):
            setattr(self, name, value)


config = Config()
config.warn_missing_dependencies = False

config.thirdparty_info = False


#
# Directories
#
config.base_directory = Path(os.path.dirname(os.path.dirname(__file__)))

# FIXME[hack]: put this into some configuration file
config.github_directory = Path('/space/home/ulf/github')
config.github_directory = Path('/work/krumnack/git/')


# model_directory: str
#    A directory for storing models (architecture and weights)
#    Mainly used for pretrained models, downloaded from some
#    third-party repository.
# FIXME[hack]: put this into some configuration file
config.model_directory = Path('/space/home/ulf/models')
config.model_directory = Path('/work/krumnack/models')

config.models_directory = config.base_directory / 'models'


# FIXME[hack]: used by models/styltransfer
# work_directory: a place where data generated by the toolbox can be stored
config.work_directory = Path(os.environ.get('WORK', '.')) / 'dltb-data'


#config.activations_directory = Path('/space/home/ulf/activations')
config.activations_directory = \
    Path(os.environ['HOME'], 'scratch', 'activations')

config.data_directory = Path('/space/data')


# FIXME[old]: Directories seems to be not really used anywhere
# - as it is not documented, the initiale goal is hard to guess
# probably it should be moved to thirdparty or config ...

# FIXME[todo]: this may also be fused with the appdirs stuff used
# in dltb/utils/__init__.py

class Directories(dict):
    """Commonly used directories.
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        home = os.environ['HOME']
        work = os.environ.get('WORK', home)
        space = os.environ.get('SPACE', home)
        self['temp'] = work
        self['models'] = os.path.join(space, 'models')
        self['data'] = os.path.join(space, 'data')
        self['opencv_models'] = \
            os.path.join(self['models'], 'opencv')
        self['tensorflow_models'] = \
            os.path.join(self['models'], 'tensorflow')




#
# Global Flags
#

# use_cpu: Should we use CPU (even if GPU is available)?
config.use_cpu = False

# prepare_on_init: prepare Preparable objects upon initialization.
config.prepare_on_init = True
